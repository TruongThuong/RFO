@using RFO.Common.Utilities.Localization
@using RFO.Common.Utilities.Pattern
@using RFO.MetaData;
@model dynamic
@{
    var selectUrl = AppConstants.WebAPIAddressUrl + "/Api/Menu/Select";
    var deleteUrl = AppConstants.WebAPIAddressUrl + "/Api/Menu/Delete";
    var selectDetailUrl = "/MenuManagement/SelectByID";
    var tblRecordsId = "tblMenuRecords";
    var translationManager = (ITranslationManager)this.Session["TranslationManager"];



}

<script type="text/javascript">

    /**
     * Provides APIs to get/set data in server side
     */
    var adminMenuCRUD = new ajaxCrudJS();
    var menuDataTableWrapper = new jDataTableWapperJS();

    /**
     * Function to display detail of selected item in server side using ajax
     * Below data need to be set for using this function:
     * + ajaxUrl: the URL which is corresponding with item will be selected
     * + recordId: the record identifier
     * + detailDlg: the jquery dialog instance will be shown as model
     * + detailDlgBody: the jquery dialog instance keeps content returned from server side
     * + srcTable: the table contains records
     */
    function displayMenuDetail(ajaxUrl, recordId) {
        var $clonedDlg = dialogManagerJS.tryGetDialog('menu-box-dlg', 'admin-box-dlg');
        $clonedDlg.find("#admin-box-title").text("@Html.Raw(translationManager.Translate("DialogDetailTitle"))");

        // Set parameters for displaying record detail
        adminMenuCRUD.setAjaxUrl(ajaxUrl);
        adminMenuCRUD.setData({ id: recordId });
        adminMenuCRUD.setEnterUrlCallbackFunc(function (data) {
            $clonedDlg.find("#admin-box-body").html(data); // Set content for dialog
            dialogManagerJS.displayDialog($clonedDlg); // Display dialog
        });

        // Display record detail
        adminMenuCRUD.enterUrl();
    };

    /**
     * Function to delete an record in server side using ajax
     * Below data need to be set for using this function:
     * + ajaxUrl: the URL which is corresponding with item will be selected
     * + recordId: the record identifier
     * + srcTable: the source table contains deleted record
     */
    function deleteMenu(ajaxUrl, recordId) {
        // Set parameters for deleting record
        adminMenuCRUD.setAjaxUrl(ajaxUrl);
        adminMenuCRUD.setData({ id: recordId });

        // Delete record
        adminMenuCRUD.deleteRecord();
    };
    
    /**
     * Subscribe to receive the event has been raised when a record has been added
     */
    $.subscribe("RecordInsertedEvent", function (record) {
        var jTbl = $("#@tblRecordsId").DataTable();
        if (jTbl != null) {
            jTbl.row.add(record).draw(false);
        }
    });

    /**
     * Subscribe to receive the event has been raised when a record has been updated
     */
    $.subscribe("RecordUpdatedEvent", function (record) {
        var jTbl = $("#@tblRecordsId").DataTable();
        if (jTbl != null) {
            var row = jTbl.rows(function (idx, data, node) {
                // Compare identifier
                return data.MenuId == record.MenuId ? true : false;
            });
            if (row != null) {
                // Send request to reload data in server side
                // false: not reset paging
                row.data(record).draw(false);
            }
        }
    });

    /**
     * Subscribe to receive the event has been raised when a record has been deleted
     */
    $.subscribe("RecordDeletedEvent", function (recordId) {
        var jTbl = $("#@tblRecordsId").DataTable();
        if (jTbl != null) {
            var row = jTbl.rows(function (idx, data, node) {
                // Compare identifier
                return data.MenuId == recordId ? true : false;
            });
            if (row != null) {
                // Send request to reload data in server side
                // false: not reset paging
                row.remove().draw(false);
            }
        }
    });

    /**
     * Initialize view
     */
    $(document).ready(function() {
        // Defines parameters for data table initialization
        var selectUrl = "@selectUrl";
        var selectDetailUrl = "@selectDetailUrl";
        var deleteUrl = "@deleteUrl";
        var localizedMessages = {
            "sSearch": "@Html.Raw(translationManager.Translate("sSearch"))",
            "sInfo": "@Html.Raw(translationManager.Translate("sInfo"))",
            "sLengthMenu": "@Html.Raw(translationManager.Translate("sLengthMenu"))",
            "sSearchKeyword": "@Html.Raw(translationManager.Translate("sSearchKeyword"))",
            "sAddNew": "@Html.Raw(translationManager.Translate("sAddNew"))",
            "sAdvanceSearch": "@Html.Raw(translationManager.Translate("sAdvanceSearch"))",
            "sColVis": "@Html.Raw(translationManager.Translate("sColVis"))"
        };
        var aoColumnDefs = [
            {
                "targets": [0,3],
                "visible": false
            },
            {
                "targets": 4, // Options column
                "render": function (data, type, row) {

                    // Display detail
                    return '<a onclick="displayMenuDetail(\'' + selectDetailUrl + '\',' + row.MenuId +
                        ')" class="btn" rel="tooltip" title="tle="@translationManager.Translate("DisplayDetail")"><i class="icon-search"></i></a>' +
                            
                        // Delete button
                        '<a onclick="deleteMenu(\'' + deleteUrl + '\',' + row.MenuId +
                        ')" class="btn" rel="tooltip" title="@translationManager.Translate("Delete")"><i class="icon-remove"></i></a>'

                        ;
                }
            },

            {
                "targets" : [0],
                "render" : function(data, type, row) {
                    return $.number(row.MenuId);
                }
            },
            {
                "targets" : [1],
                "render" : function(data, type, row) {
                    return row.Name;
                }
            },
            {
                "targets" : [2],
                "render" : function(data, type, row) {
                    return row.IsActive;
                }
            },
            {
                "targets" : [3],
                "render" : function(data, type, row) {
                    return $.number(row.OrderIndex);
                }
            },


        ];
        var aoColumns = [

            { "index" : [0], "mData" : "MenuId" },
            { "index" : [1], "mData" : "Name", "bSortable" : false, "sClass" : "hidden-350 hidden-480" },
            { "index" : [2], "mData" : "IsActive", "bSortable" : false, "sClass" : "hidden-350 hidden-480" },
            { "index" : [3], "mData" : "OrderIndex", "bSortable" : false, "sClass" : "hidden-350 hidden-480" },
            { "mData" : "MenuId", "bSortable" : false }
        ];

        var fnCreatedRow = function (nRow, aData, iDataIndex) {
            // Create row-id attribute
            $(nRow).attr("row-id", aData.MenuId);
        };
        
        var fnDrawCallback = function () {



        };

        // Set parameters to initialize jquery datatable
        menuDataTableWrapper.setSelectUrl(selectUrl);

        menuDataTableWrapper.setNeedDisplayAddNewBtn(true);
        menuDataTableWrapper.setAddNewFunctionJS('displayMenuDetail(\'' + selectDetailUrl + '\', -1)');

        menuDataTableWrapper.setLocalizedMessages(localizedMessages);
        menuDataTableWrapper.setSrcTable($("#@tblRecordsId"));
        menuDataTableWrapper.setAoColumns(aoColumns);
        menuDataTableWrapper.setAoColumnDefs(aoColumnDefs);
        menuDataTableWrapper.setFnCreatedRow(fnCreatedRow);
        menuDataTableWrapper.setFnDrawCallback(fnDrawCallback);
        menuDataTableWrapper.setNeedDisplayColVis(true);



        // Two below options will be used for hierarchical category
        // menuDataTableWrapper.setDefaultDisplayLength(menuDataTableWrapper.MAX_NUM_RETRIEVED_RECORD);
        // menuDataTableWrapper.setALengthMenu([[menuDataTableWrapper.MAX_NUM_RETRIEVED_RECORD], ["All"]]);
        
        // Create data table with options, column filters and localized messages
        menuDataTableWrapper.initJDataTable();
    });

</script>

<table id="@tblRecordsId" class="table table-hover table-nomargin table-bordered dataTable-columnfilter dataTable">
    <thead>
        <tr>

            <th class="hidden">ID</th>
            <th class="hidden-350 hidden-480">Name</th>
            <th class="hidden-350 hidden-480">Status</th>
            <th class="hidden-350 hidden-480">Order Index</th>

            <th>Options</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

