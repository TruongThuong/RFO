@using RFO.Common.Utilities.Localization
@using RFO.Common.Utilities.Pattern
@using RFO.MetaData;
@model dynamic
@{
    var selectUrl = AppConstants.WebAPIAddressUrl + "/Api/Table/Select";
    var tblRecordsId = "tblTableOrderRecords";
    var translationManager = (ITranslationManager)this.Session["TranslationManager"];



}

<script type="text/javascript">

    /**
     * Provides APIs to get/set data in server side
     */
    var adminTableOrderCRUD = new ajaxCrudJS();
    var tableDataTableOrderWrapper = new jDataTableWapperJS();

    /**
     * Function to select ProductImage through Ajax request
     * Below data need to be set for using this function:
     * + ajaxUrl: the URL which is corresponding with item will be selected
     * + recordId: the Product identifier
     */
    function viewOrderDetail(recordId) {
        var $clonedDlg = dialogManagerJS.tryGetDialog('tableorder-box-dlg', 'admin-box-dlg');
        $clonedDlg.find("#admin-box-title").text("Order");

        // Set parameters for displaying record detail
        adminTableOrderCRUD.setAjaxUrl("/OrderDetailManagement/EnterSelectByTableId");
        adminTableOrderCRUD.setData({ tableId: recordId });
        adminTableOrderCRUD.setEnterUrlCallbackFunc(function (data) {
            $clonedDlg.find("#admin-box-body").html(data); // Set content for dialog
            dialogManagerJS.displayDialog($clonedDlg); // Display dialog
        });

        // Display ProductImage view
        adminTableOrderCRUD.enterUrl();
    };

    /**
     * Function to delete an record in server side using ajax
     * Below data need to be set for using this function:
     * + ajaxUrl: the URL which is corresponding with item will be selected
     * + recordId: the record identifier
     * + srcTableOrder: the source table contains deleted record
     */
    function checkout(recordId) {
        bootbox.confirm('Bạn có chắc chắn muốn thực hiện?', function (confirmResult) {
            if (!confirmResult) {
                return;
            }

            // Set parameters for deleting record
            adminTableOrderCRUD.setAjaxUrl("@AppConstants.WebAPIAddressUrl" + "/Api/Table/CheckOut");
            adminTableOrderCRUD.setData({ id: recordId });
            adminTableOrderCRUD.setEnterUrlCallbackFunc(function (data) {
                var jTbl = $("#@tblRecordsId").DataTable();
                if (jTbl != null) {
                    var record = null;
                    var row = jTbl.rows(function (idx, data, node) {
                        // Compare identifier
                        record = data;
                        return data.TableId == recordId ? true : false;
                    });
                    if (row != null) {
                        // Send request to reload data in server side
                        // false: not reset paging
                        row.data(record).draw(false);
                    }
                }
            });

            // Delete record
            adminTableOrderCRUD.enterUrl();
        });
    };

    /**
     * Subscribe to receive the event has been raised when a record has been added
     */
    $.subscribe("RecordInsertedEvent", function (record) {
        var jTbl = $("#@tblRecordsId").DataTable();
        if (jTbl != null) {
            var row = jTbl.rows(function (idx, data, node) {
                // Compare identifier
                return data.TableId == record.TableId ? true : false;
            });
            if (row != null) {
                // Send request to reload data in server side
                // false: not reset paging
                row.data(record).draw(false);
            }
        }
    });

    /**
     * Subscribe to receive the event has been raised when a record has been updated
     */
    $.subscribe("RecordUpdatedEvent", function (record) {
        var jTbl = $("#@tblRecordsId").DataTable();
        if (jTbl != null) {
            var row = jTbl.rows(function (idx, data, node) {
                // Compare identifier
                return data.TableId == record.TableId ? true : false;
            });
            if (row != null) {
                // Send request to reload data in server side
                // false: not reset paging
                row.data(record).draw(false);
            }
        }
    });

    /**
     * Initialize view
     */
    $(document).ready(function() {
        // Defines parameters for data table initialization
        var selectUrl = "@selectUrl";
        var localizedMessages = {
            "sSearch": "@Html.Raw(translationManager.Translate("sSearch"))",
            "sInfo": "@Html.Raw(translationManager.Translate("sInfo"))",
            "sLengthMenu": "@Html.Raw(translationManager.Translate("sLengthMenu"))",
            "sSearchKeyword": "@Html.Raw(translationManager.Translate("sSearchKeyword"))",
            "sAddNew": "@Html.Raw(translationManager.Translate("sAddNew"))",
            "sAdvanceSearch": "@Html.Raw(translationManager.Translate("sAdvanceSearch"))",
            "sColVis": "@Html.Raw(translationManager.Translate("sColVis"))"
        };
        var aoColumnDefs = [
            {
                "targets": [0],
                "visible": false
            },
            {
                "targets": 4, // Options column
                "render": function (data, type, row) {

                    // Display detail
                    return '<a onclick="viewOrderDetail(' + row.TableId + ')" class="btn" rel="tooltip" title="Order"><i class="icon-book"></i></a>' +
                           '<a onclick="checkout(' + row.TableId + ')" class="btn" rel="tooltip" title="Check Bill"><i class="icon-check"></i></a>'
                           
                        ;
                }
            },

            {
                "targets" : [0],
                "render" : function(data, type, row) {
                    return $.number(row.TableId);
                }
            },
            {
                "targets" : [1],
                "render" : function(data, type, row) {
                    return row.Name;
                }
            },
            {
                "targets": [2],
                "render": function (data, type, row) {
                    var statusImage;
                    if (row.Status == 1) { // Available
                        statusImage = "table-available.gif";
                    } else { // Using
                        statusImage = "table-using.gif";
                    }
                    return '<img src="../../../../Templates/Admin/images/' + statusImage + '" alt="Hình ảnh"/>';
                }
            },
            {
                "targets" : [3],
                "render" : function(data, type, row) {
                    if (row.Status == 1) {
                        return "Empty";
                    }

                    if (row.Status == 2) {
                        return "Reserved";
                    }

                    if (row.Status == 3) {
                        return "Full";
                    }
                }
            },


        ];
        var aoColumns = [

            { "index" : [0], "mData" : "TableId" },
            { "index" : [1], "mData" : "Name", "bSortable" : false, "sClass" : "hidden-350 hidden-480" },
            { "index" : [2], "mData": "Status", "bSortable": false, "sClass": "hidden-350 hidden-480" },
            { "index" : [3], "mData": "Status", "bSortable": false, "sClass": "hidden-350 hidden-480" },
            { "mData" : "TableId", "bSortable": false }
        ];

        var fnCreatedRow = function (nRow, aData, iDataIndex) {
            // Create row-id attribute
            $(nRow).attr("row-id", aData.TableId);

            // Change color based on status
            var status = aData.Status;
            if (status != 1) {
                $(nRow).css('color', 'blue');
                $(nRow).css('font-weight', 'bold');
            }
        };

        var fnDrawCallback = function () {



        };

        // Set parameters to initialize jquery datatable
        tableDataTableOrderWrapper.setSelectUrl(selectUrl);

        tableDataTableOrderWrapper.setNeedDisplayAddNewBtn(false);
        //tableDataTableOrderWrapper.setAddNewFunctionJS('addProductToOrder(\'' + selectDetailUrl + '\', -1)');

        tableDataTableOrderWrapper.setLocalizedMessages(localizedMessages);
        tableDataTableOrderWrapper.setSrcTable($("#@tblRecordsId"));
        tableDataTableOrderWrapper.setAoColumns(aoColumns);
        tableDataTableOrderWrapper.setAoColumnDefs(aoColumnDefs);
        tableDataTableOrderWrapper.setFnCreatedRow(fnCreatedRow);
        tableDataTableOrderWrapper.setFnDrawCallback(fnDrawCallback);
        tableDataTableOrderWrapper.setNeedDisplayColVis(true);



        // Two below options will be used for hierarchical category
        tableDataTableOrderWrapper.setDefaultDisplayLength(tableDataTableOrderWrapper.MAX_NUM_RETRIEVED_RECORD);
        tableDataTableOrderWrapper.setALengthMenu([[tableDataTableOrderWrapper.MAX_NUM_RETRIEVED_RECORD], ["All"]]);

        // Create data table with options, column filters and localized messages
        tableDataTableOrderWrapper.initJDataTable();
    });

</script>

<table id="@tblRecordsId" class="table table-hover table-nomargin table-bordered dataTableOrder-columnfilter dataTableOrder">
    <thead>
        <tr>
            <th>ID</th>
            <th class="hidden-350 hidden-480">Table</th>
            <th class="hidden-350 hidden-480">Picture</th>
            <th class="hidden-350 hidden-480">Status</th>
            <th>Options</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

