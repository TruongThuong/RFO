@using RFO.Common.Utilities.Localization
@using RFO.MetaData
@model Int32
@{
    var productImageId = Model;
    var translationManager = (ITranslationManager)this.Session["TranslationManager"];
}

<script type="text/javascript">

    /**
     * Provides APIs to get/set data in server side
     */
    var adminProductImageCRUD = new ajaxCrudJS();

    /**
     * Fix issue: CKEditor submitting empty content to the form.
     */
    function setCKContentFunc() {


    };
    
    /**
     * Build update request context accoring serialized form values
     */
    function buildUpdateRequestContextFunc(formValues) {
        var updateRequestContext = {
            Record: {

                ProductId: formValues["ProductId"],
                ImageFile: formValues["ImageFile"],

            }
        };

        if ('@productImageId' != '-1') {
            updateRequestContext.Record.ProductImageId = formValues["ProductImageId"];
        }

        if (formValues["IsPresent"] != null) { // Active
            updateRequestContext.Record.IsPresent = (formValues["IsPresent"] == "on" ? true : false)
        } else { // Deactive
            updateRequestContext.Record.IsPresent = false;
        }
        if (formValues["IsActive"] != null) { // Active
            updateRequestContext.Record.IsActive = (formValues["IsActive"] == "on" ? true : false)
        } else { // Deactive
            updateRequestContext.Record.IsActive = false;
        }

        return updateRequestContext;
    }

    /**
     * Register to update record
     */
    function registerUpdateRecord() {
        // Using jquery validation plugin (jquery.validate.js) to validate
        var updateType = adminProductImageCRUD.INSERT_UPDATE_TYPE;
        var ajaxUrl = "@AppConstants.WebAPIAddressUrl" + "/Api/ProductImage/Insert";

        // Determine update mode
        if ('@productImageId' != '-1') {
            updateType = adminProductImageCRUD.MODIFY_UPDATE_TYPE;
            ajaxUrl = "@AppConstants.WebAPIAddressUrl" + "/Api/ProductImage/Update";
        }

        // Validation rules, using jquery validation plugin (jquery.validate.js) to validate
        var validationRules = {


        };

        // Validation messages
        var validationMsgs = {


        };

        // Set parameters for updating
        adminProductImageCRUD.setUpdateType(updateType);
        adminProductImageCRUD.setAjaxUrl(ajaxUrl);
        adminProductImageCRUD.setValidationRules(validationRules);
        adminProductImageCRUD.setValidationMsgs(validationMsgs);
        adminProductImageCRUD.setUpdateFrm($("#frmRecord"));
        adminProductImageCRUD.setDlgModel($("#productImage-box-dlg"));
        adminProductImageCRUD.setCKContentFunc(setCKContentFunc);
        adminProductImageCRUD.setBuildUpdateRequestContextFunc(buildUpdateRequestContextFunc);
        adminProductImageCRUD.setAddedRecordIdFunc(function (record) {
            return record.ProductImageId;
        });

        // Update record
        adminProductImageCRUD.onUpdateRecord();
    };

    /**
     * Load ProductImage detail
     */
    function loadProductImageDetail() {
        $.ajax({
            dataType: 'json',
            url: "@AppConstants.WebAPIAddressUrl" + "/Api/ProductImage/SelectByID",
            type: "GET",
            data: { id: "@productImageId" }
        }).done(function () {
        }).complete(function () {
        }).success(function (response) {
            if (response.Result) {
                var record = response.Record;

                $("#ProductImageId").val(record.ProductImageId);

                $("#IsPresent").iCheck(record.IsPresent ? 'check' : 'uncheck');
                $("#IsActive").iCheck(record.IsActive ? 'check' : 'uncheck');


                $("#ImageFileSrc").attr("src", '@AppConstants.WebAPIAddressUrl' + '/Api/ProductImage/GetImage?filename=' + record.ImageFile);

                // Load Product list
                $("#SelectedProductIds").val(record.ProductId);

            } else {
                app.logger.error(response.Description);
            }
        });
    };

    /**
     * Load Products
     */
    function loadProducts() {
        var ajaxUrl = "@AppConstants.WebAPIAddressUrl" + "/Api/Product/SelectAll";
        $.ajax({
            dataType: 'json',
            url: ajaxUrl,
            type: "GET",
        }).done(function () {
        }).complete(function () {
        }).success(function (response) {
            if (response.Result) {
                $.each(response.Records, function (i, record) {
                    $("#ProductId").append('<option value="' + record.ProductId + '">' + record.Name + '</option>');
                });
                // Load selected criteria has been selected in the previous searching
                var selectedProductIds = $("#SelectedProductIds").val().split(",");
                $("#ProductId").select2("val", selectedProductIds);
            } else {
                app.logger.error(response.Description);
            }
        });
    };

    $(document).ready(function () {

        // Using iCheck plugin (jquery.icheck.min.js) to customize checkbox
        icheck();


        // Format ProductImageId field
        $("#ProductImageId").number(true, 0);
        // Format ProductId field
        $("#ProductId").number(true, 0);

        // Initialize Select2 on the elements that you want to make multiple selects
        $("#ProductId").select2();

        // Register to update record
        registerUpdateRecord();

        if ('@productImageId' != '-1') { // -1: Insert mode - otherwise: Update mode
            setTimeout(function () { // Wait timeout to makesure all controls has been initialized
                loadProductImageDetail();

                loadProducts();

            }, 500);
        } else {
            setTimeout(function () { // Wait timeout to makesure all controls has been initialized

                loadProducts();

            }, 500);
        }
    });

</script>

<form id="frmRecord" action="#" method="POST" class='form-horizontal form-bordered'>

    @if (productImageId != -1)
    {
    <div class="control-group">
        <label for="ProductImageId" class="control-label">@translationManager.Translate("ProductImageId")</label>
        <div class="controls">
            <input type="text" readonly="readonly" name="ProductImageId" id="ProductImageId" placeholder="..."
                   class="input-xlarge" data-rule-required="true"
                   value="@productImageId">
        </div>
    </div>
    }
    <div class="control-group">
        <label for="ProductId" class="control-label">@translationManager.Translate("ProductId")</label>
        <div class="controls">
            <select name="ProductId" id="ProductId" class='select2-me input-xlarge'></select>
            <input type="hidden" name="SelectedProductIds" id="SelectedProductIds" />
        </div>
    </div>
    <div class="control-group">
        <label for="ImageFile" class="control-label"></label>
        <div class="controls">
            <div class="fileupload fileupload-new" data-provides="fileupload">
                <div class="fileupload-new thumbnail" style="width: 200px; height: 150px;">
                    <img id=ImageFileSrc name=ImageFileSrc alt="" />
                </div>
                <div class="fileupload-preview fileupload-exists thumbnail" 
                     style="max-width: 200px; max-height: 150px; line-height: 20px;"></div>
                <div>
                    <span class="btn btn-file">
                        <span class="fileupload-new">Lựa chọn hình ảnh</span>
                        <span class="fileupload-exists">Thay đổi</span>
                        <input type="file" name="ImageFile" id="ImageFile" />
                    </span>
                    <a href="#" class="btn fileupload-exists" data-dismiss="fileupload">Xóa</a>
                </div>
            </div>
        </div>
    </div>
    <div class="control-group">
        <label for="IsPresent" class="control-label">@translationManager.Translate("IsPresent")</label>
        <div class="controls">
            <div class="check-line">
                <input type="checkbox" name="IsPresent" id="IsPresent" class='icheck-me'
                       data-skin="square" data-color="blue" />
            </div>
        </div>
    </div>
    <div class="control-group">
        <label for="IsActive" class="control-label">@translationManager.Translate("IsActive")</label>
        <div class="controls">
            <div class="check-line">
                <input type="checkbox" name="IsActive" id="IsActive" class='icheck-me'
                       data-skin="square" data-color="blue" />
            </div>
        </div>
    </div>

    <div class="form-actions">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Thoát</button>
        <button type="submit" class="btn btn-primary">Cập nhật</button>
    </div>
</form>

