@using RFO.Common.Utilities.Localization
@using RFO.MetaData
@model Int32
@{
    var orderStateId = Model;
    var translationManager = (ITranslationManager)this.Session["TranslationManager"];
}

<script type="text/javascript">

    /**
     * Provides APIs to get/set data in server side
     */
    var adminOrderStateCRUD = new ajaxCrudJS();

    /**
     * Fix issue: CKEditor submitting empty content to the form.
     */
    function setCKContentFunc() {


    };
    
    /**
     * Build update request context accoring serialized form values
     */
    function buildUpdateRequestContextFunc(formValues) {
        var updateRequestContext = {
            Record: {

                Name: formValues["Name"],
                BriefDescription: formValues["BriefDescription"],

            }
        };

        if ('@orderStateId' != '-1') {
            updateRequestContext.Record.OrderStateId = formValues["OrderStateId"];
        }


        return updateRequestContext;
    }

    /**
     * Register to update record
     */
    function registerUpdateRecord() {
        // Using jquery validation plugin (jquery.validate.js) to validate
        var updateType = adminOrderStateCRUD.INSERT_UPDATE_TYPE;
        var ajaxUrl = "@AppConstants.WebAPIAddressUrl" + "/Api/OrderState/Insert";

        // Determine update mode
        if ('@orderStateId' != '-1') {
            updateType = adminOrderStateCRUD.MODIFY_UPDATE_TYPE;
            ajaxUrl = "@AppConstants.WebAPIAddressUrl" + "/Api/OrderState/Update";
        }

        // Validation rules, using jquery validation plugin (jquery.validate.js) to validate
        var validationRules = {

            Name: { required: true, remote: { url: "@AppConstants.WebAPIAddressUrl" + "/Api/OrderState/IsNotExist" } }

        };

        // Validation messages
        var validationMsgs = {

            Name: { required: "@Html.Raw(translationManager.Translate("InputRequired"))" },
            BriefDescription: { required: "@Html.Raw(translationManager.Translate("InputRequired"))" },

        };

        // Set parameters for updating
        adminOrderStateCRUD.setUpdateType(updateType);
        adminOrderStateCRUD.setAjaxUrl(ajaxUrl);
        adminOrderStateCRUD.setValidationRules(validationRules);
        adminOrderStateCRUD.setValidationMsgs(validationMsgs);
        adminOrderStateCRUD.setUpdateFrm($("#frmRecord"));
        adminOrderStateCRUD.setDlgModel($("#orderState-box-dlg"));
        adminOrderStateCRUD.setCKContentFunc(setCKContentFunc);
        adminOrderStateCRUD.setBuildUpdateRequestContextFunc(buildUpdateRequestContextFunc);
        adminOrderStateCRUD.setAddedRecordIdFunc(function (record) {
            return record.OrderStateId;
        });

        // Update record
        adminOrderStateCRUD.onUpdateRecord();
    };

    /**
     * Load OrderState detail
     */
    function loadOrderStateDetail() {
        $.ajax({
            dataType: 'json',
            url: "@AppConstants.WebAPIAddressUrl" + "/Api/OrderState/SelectByID",
            type: "GET",
            data: { id: "@orderStateId" }
        }).done(function () {
        }).complete(function () {
        }).success(function (response) {
            if (response.Result) {
                var record = response.Record;

                $("#OrderStateId").val(record.OrderStateId);
                $("#Name").val(record.Name);
                $("#BriefDescription").val(record.BriefDescription);




            } else {
                app.logger.error(response.Description);
            }
        });
    };

    $(document).ready(function () {

        // Using iCheck plugin (jquery.icheck.min.js) to customize checkbox
        icheck();


        // Format OrderStateId field
        $("#OrderStateId").number(true, 0);

        // Register to update record
        registerUpdateRecord();

        if ('@orderStateId' != '-1') { // -1: Insert mode - otherwise: Update mode
            setTimeout(function () { // Wait timeout to makesure all controls has been initialized
                loadOrderStateDetail();

            }, 500);
        } else {
            setTimeout(function () { // Wait timeout to makesure all controls has been initialized

            }, 500);
        }
    });

</script>

<form id="frmRecord" action="#" method="POST" class='form-horizontal form-bordered'>

    @if (orderStateId != -1)
    {
    <div class="control-group hidden">
        <label for="OrderStateId" class="control-label">ID</label>
        <div class="controls">
            <input type="text" readonly="readonly" name="OrderStateId" id="OrderStateId" placeholder="..."
                   class="input-xlarge" data-rule-required="true"
                   value="@orderStateId">
        </div>
    </div>
    }
    <div class="control-group">
        <label for="Name" class="control-label">Status</label>
        <div class="controls">
            <input type="text" name="Name" id="Name" placeholder="..."
                   class="input-xlarge" data-rule-required="true">
        </div>
    </div>
    <div class="control-group hidden">
        <label for="BriefDescription" class="control-label">Description</label>
        <div class="controls">
            <textarea name="BriefDescription" id="BriefDescription" rows="4" class="input-block-level" required></textarea>
        </div>
    </div>

    <div class="form-actions">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
        <button type="submit" class="btn btn-primary">Update</button>
    </div>
</form>

